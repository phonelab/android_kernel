#!/usr/bin/python

# Generate C macro strings for wl ioctl commands

import sys, re, argparse

parser = argparse.ArgumentParser()

parser.add_argument('--input', type=str, default="include/wlioctl.h", help="Input header file.")
parser.add_argument('--output', type=str, default="wlc_ioctl_names.c", help="Output c file.")
parser.add_argument('--quiet', action='store_true')

args = parser.parse_args()

print "Input file: %s" % (args.input)
print "Output file: %s" % (args.output)

c_file = open(args.output, 'w')

CMD_NUM = 320

print >>c_file, "/* Generated by %s, DO NOT MODIFY. */" % (sys.argv[0])
print >>c_file, "const char* WLC_CMD_NAME[%d] = {" % (CMD_NUM)

with open(args.input, 'r') as f :
  start = False
  cmds = set()
  for line in f :
    line = line.strip()
    if len(line) == 0 :
      continue

    if not start and "WLC_GET_MAGIC" not in line :
      continue
    start = True

    if "define WLC_" not in line :
      continue

    if not args.quiet :
      print line

    m = re.search(r"""define\s+(?P<var>\w+)\s+(?P<val>\d+)""", line)
    assert m is not None

    name = m.group('var')
    cmd = int(m.group('val'))

    if cmd not in cmds :
      cmds.add(cmd)
    else :
      print "Warning: Duplicate cmd: %d (%s)" % (cmd, name)
      print line
      continue

    if cmd < CMD_NUM-1 :
      print >>c_file, "\t\"%s\", \t\t/* %d */" % (name, cmd)
    else :
      print >>c_file, "\t\"%s\" \t\t/* %d */" % (name, cmd)
      break

  print >>c_file, "};"
